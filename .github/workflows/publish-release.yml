name: Publish release

permissions: write-all

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g., v1.2.3)"
        required: true
      release_notes:
        description: "Release notes (markdown)"
        required: false
        default: ""

jobs:
  update_changelog:
    # Run on a real release event or a manual run with a provided tag
    if: ${{ github.event_name == 'release' || github.event.inputs.tag != '' }}
    runs-on: ubuntu-latest
    env:
      # Prefer the release event values, otherwise fall back to manual inputs
      TAG: ${{ github.event.release.tag_name || github.event.inputs.tag }}
      RELEASE_NOTES: ${{ github.event.release.body || github.event.inputs.release_notes }}
      GITHUB_TOKEN: ${{ secrets.CR_PAT }}
      GH_TOKEN: ${{ secrets.CR_PAT }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Update CHANGELOG.md and config.json
        run: |
          set -euo pipefail

          # Fallback if notes are empty
          RELEASE_NOTES="${RELEASE_NOTES:-No release notes provided.}"

          # create new GIT branch
          git checkout -b "automated/update-changelog-${TAG}"

          # Prepend new release info to the existing CHANGELOG.md
          { printf "# Release %s\n\n%s\n\n" "$TAG" "$RELEASE_NOTES"; cat CHANGELOG.md; } > CHANGELOG.tmp
          mv CHANGELOG.tmp CHANGELOG.md

          # put new version into config.json
          jq --arg tag "$TAG" '.version = $tag' config.json > config.tmp
          mv config.tmp config.json

          # commit & push
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md config.json
          git commit -m "chore: update changelog for release ${TAG}"
          git push --set-upstream origin "automated/update-changelog-${TAG}"

          # create PR
          gh pr create \
            --title "chore: update changelog for release ${TAG}" \
            --body "This PR updates the changelog."

          # merge PR (fast-forward or merge commit based on repo settings)
          gh pr merge "automated/update-changelog-${TAG}" --merge

  publish_release:
    # Only build/push if we have a tag (release event or manual input)
    if: ${{ github.event_name == 'release' || github.event.inputs.tag != '' }}
    runs-on: ubuntu-latest
    env:
      TAG: ${{ github.event.release.tag_name || github.event.inputs.tag }}
    strategy:
      fail-fast: false
      matrix:
        arch:
          - { docker_name: amd64, hass_name: amd64 }
          - { docker_name: arm64, hass_name: aarch64 }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # QEMU lets amd64 runners cross-build arm/arm64 layers
      - uses: docker/setup-qemu-action@v3

      # Buildx = Dockerâ€™s multi-arch builder front-end
      - uses: docker/setup-buildx-action@v3

      # Log in to GitHub Container Registry
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: DTidey
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/${{ matrix.arch.docker_name }}
          build-args: |
            BUILD_VERSION=${{ env.TAG }}
            BUILD_ARCH=${{ matrix.arch.hass_name }}
          tags: |
            ghcr.io/rbillon59/hass-n8n-${{ matrix.arch.hass_name }}:${{ env.TAG }}
            ghcr.io/rbillon59/hass-n8n-${{ matrix.arch.hass_name }}:latest
